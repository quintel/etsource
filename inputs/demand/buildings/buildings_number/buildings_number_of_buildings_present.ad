# This input:
# - calculates the relative decrease in demand through insulation
# - calculates the relative decrease in demand through demolition
# - updates the demand using the combined relative change in demand
# - updates the number of buildings_present
# - updates the insulation costs
# - the roof surface available for solar PV on buildings based on the changed total number of buildings
# - the total useful demand for cooling based on the changed total number of buildings
# - the total useful demand for lighting based on the changed total number of buildings
# - the total useful demand for appliances based on the changed total number of buildings
# - the electricity production of buildings solar PV, because user sets a share of the potential

- query =
    insulation_value_present = QUERY_PRESENT(-> { AREA(typical_useful_demand_for_space_heating_buildings_present) });
    insulation_value_future = INPUT_VALUE(buildings_insulation_level_buildings_present);
    insulation_relative_change = DIVIDE(insulation_value_future,insulation_value_present);

    number_of_units_present = QUERY_PRESENT(-> { AREA(present_number_of_buildings) });
    number_of_units_future = USER_INPUT();
    number_of_units_relative_change = DIVIDE(number_of_units_future,number_of_units_present);

    combined_relative_change = PRODUCT(insulation_relative_change,number_of_units_relative_change);

    EACH(
      UPDATE_WITH_FACTOR(V(buildings_useful_demand_for_space_heating_buildings_present), preset_demand, combined_relative_change),
      UPDATE(V(buildings_useful_demand_for_space_heating_buildings_present_after_solar_thermal), number_of_units, USER_INPUT()),
      UPDATE(V(buildings_useful_demand_for_space_heating_buildings_present_after_solar_thermal), initial_investment, QUERY_FUTURE(-> { Q(costs_of_insulation_buildings_present)})),
      UPDATE_WITH_FACTOR(AREA(), buildings_roof_surface_available_for_pv, DIVIDE(QUERY_FUTURE(-> { Q(number_of_buildings)}), QUERY_PRESENT(-> { AREA(present_number_of_buildings)}))),
      UPDATE_WITH_FACTOR(V(buildings_useful_demand_cooling,buildings_useful_demand_for_appliances,buildings_useful_demand_light), preset_demand, DIVIDE(QUERY_FUTURE(-> { Q(number_of_buildings)}), QUERY_PRESENT(-> { AREA(present_number_of_residences)}))),
      UPDATE_ABSOLUTE(
        V(OUTPUT_SLOTS(LOOKUP(buildings_solar_pv_solar_radiation), electricity), "edges.detect{|l| !l.flexible? }"),
        share,
        (
          ((INPUT_VALUE(buildings_solar_pv_solar_radiation_market_penetration) / 100.0) *
          (QUERY_FUTURE(-> { AREA(buildings_roof_surface_available_for_pv) }) / V(buildings_solar_pv_solar_radiation, land_use_per_unit)) *
          V(buildings_solar_pv_solar_radiation, typical_electricity_production_per_unit))
        )
      )
    )
- priority = 0
- max_value_gql = present:AREA(present_number_of_buildings)
- min_value = 0.0
- start_value_gql = present:AREA(present_number_of_buildings)
- step_value = 1.0
- unit = #
- update_period = future
- update_type = mixed
