# This input:
# - calculates the relative decrease in demand through insulation
# - calculates the relative decrease in demand through demolition
# - updates the demand using the combined relative change in demand
# - updates the number of buildings_present
# - updates the insulation costs
# - the roof surface available for solar PV on buildings based on the changed total number of buildings
# - the total useful demand for cooling based on the changed total number of buildings
# - the total useful demand for lighting based on the changed total number of buildings
# - the total useful demand for appliances based on the changed total number of buildings
# - the electricity production of buildings solar PV, because user sets a share of the potential

- query =
    insulation_value_present = QUERY_PRESENT(-> { AREA(typical_useful_demand_for_space_heating_buildings_present) });
    insulation_value_future = INPUT_VALUE(buildings_insulation_level_buildings_present);
    insulation_relative_change = DIVIDE(insulation_value_future,insulation_value_present);

    number_of_units_present = QUERY_PRESENT(-> { AREA(present_number_of_buildings) });
    number_of_units_future = USER_INPUT();
    number_of_units_relative_change = DIVIDE(number_of_units_future,number_of_units_present);

    total_number_of_units_present = QUERY_PRESENT(-> { AREA(present_number_of_buildings)});
    total_number_of_units_future = USER_INPUT() + INPUT_VALUE(buildings_number_of_buildings_future);
    total_number_of_units_relative_change = DIVIDE(total_number_of_units_future,total_number_of_units_present);

    useful_heat_demand_future = insulation_relative_change * number_of_units_relative_change * QUERY_PRESENT(-> {V(buildings_useful_demand_for_space_heating_buildings_present, preset_demand)});
    useful_cooling_demand_future = total_number_of_units_relative_change * QUERY_PRESENT(-> {V(buildings_useful_demand_cooling, preset_demand)});
    useful_lighting_demand_future = total_number_of_units_relative_change * QUERY_PRESENT(-> {V(buildings_useful_demand_light, preset_demand)});
    useful_appliances_demand_future = total_number_of_units_relative_change * QUERY_PRESENT(-> {V(buildings_useful_demand_for_appliances, preset_demand)});
    roof_surface_for_pv_future = total_number_of_units_relative_change * QUERY_PRESENT(-> {AREA(buildings_roof_surface_available_for_pv)});

    EACH(
      UPDATE(V(buildings_useful_demand_for_space_heating_buildings_present), preset_demand, useful_heat_demand_future),
      UPDATE(V(buildings_useful_demand_cooling), preset_demand, useful_cooling_demand_future),
      UPDATE(V(buildings_useful_demand_light), preset_demand, useful_lighting_demand_future),
      UPDATE(V(buildings_useful_demand_for_appliances), preset_demand, useful_appliances_demand_future),
      UPDATE(AREA(), buildings_roof_surface_available_for_pv, roof_surface_for_pv_future),

      UPDATE(V(buildings_useful_demand_for_space_heating_buildings_present_after_solar_thermal), number_of_units, USER_INPUT()),
      UPDATE(V(buildings_useful_demand_for_space_heating_buildings_present_after_solar_thermal), initial_investment, QUERY_FUTURE(-> { Q(costs_of_insulation_buildings_present)}))
    )
- priority = 1
- max_value_gql = present:AREA(present_number_of_buildings)
- min_value = 0.0
- start_value_gql = present:AREA(present_number_of_buildings)
- step_value = 1.0
- unit = #
- update_period = future
