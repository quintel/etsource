# Update statement for number of old households
# DEBT: remove the ugly + 1 to prevent division by zero in other queries
# See households_insulation_level_new_houses or households_insulation_level_old_houses for an explanation of the hybrid heatpump (HHP) related queries

- query =
  cost_per_old_house = AREA(old_houses_insulation_cost_constant) * (INPUT_VALUE(households_insulation_level_old_houses) - AREA(insulation_level_old_houses_min));
  total_cost = cost_per_old_house * USER_INPUT() * 1_000_000;

  initial_gas_share = QUERY_PRESENT(-> { V(households_space_heater_hybrid_heatpump_air_water_electricity, network_gas_input_conversion) });
  initial_electricity_share = QUERY_PRESENT(-> { V(households_space_heater_hybrid_heatpump_air_water_electricity, electricity_input_conversion) });

  min_insulation_ratio_old_houses = QUERY_PRESENT(-> {AREA(insulation_level_old_houses_min) }) / QUERY_PRESENT(-> {AREA(insulation_level_old_houses_max) });

  scaling_factor_old_houses = 1 - min_insulation_ratio_old_houses;

  insulation_fraction_old_houses = ((QUERY_PRESENT(-> {AREA(insulation_level_old_houses_min) }) / INPUT_VALUE(households_insulation_level_old_houses)) - min_insulation_ratio_old_houses) / scaling_factor_old_houses;

  min_insulation_ratio_new_houses = QUERY_PRESENT(-> {AREA(insulation_level_new_houses_min) }) / QUERY_PRESENT(-> {AREA(insulation_level_new_houses_max) });

  scaling_factor_new_houses = 1 - min_insulation_ratio_new_houses;

  insulation_fraction_new_houses = (((QUERY_PRESENT(-> {AREA(insulation_level_new_houses_min) }) / INPUT_VALUE(households_insulation_level_new_houses)) - min_insulation_ratio_new_houses) / scaling_factor_new_houses); 

  insulation_fraction_weighted_average = IF(((INPUT_VALUE(households_number_of_new_houses) + USER_INPUT())==0), 1.0, DIVIDE((insulation_fraction_new_houses * INPUT_VALUE(households_number_of_new_houses) + insulation_fraction_old_houses * USER_INPUT()) ,(INPUT_VALUE(households_number_of_new_houses) + USER_INPUT())));

  new_gas_share = insulation_fraction_weighted_average * initial_gas_share;
  new_electricity_share = (1.0 - new_gas_share) / (1.0 - initial_gas_share) * initial_electricity_share;
  new_ambient_heat_share = (1.0 - new_gas_share - new_electricity_share);

  EACH(
    UPDATE_WITH_FACTOR(L(households_old_houses_useful_demand_for_heating), preset_demand, USER_INPUT() * 1_000_000 / QUERY_PRESENT(-> { AREA(number_of_old_residences) })),
    UPDATE_WITH_FACTOR(L(households_old_houses_useful_demand_for_cooling), preset_demand, USER_INPUT() * 1_000_000 / QUERY_PRESENT(-> { AREA(number_of_old_residences) })),
    UPDATE(INPUT_SLOTS(V(households_space_heater_hybrid_heatpump_air_water_electricity), electricity), conversion, new_electricity_share),
    UPDATE(INPUT_SLOTS(V(households_space_heater_hybrid_heatpump_air_water_electricity), network_gas), conversion, new_gas_share),
    UPDATE(INPUT_SLOTS(V(households_space_heater_hybrid_heatpump_air_water_electricity), ambient_heat), conversion, new_ambient_heat_share),
    UPDATE(AREA(), number_of_old_residences, USER_INPUT() * 1_000_000),
    UPDATE(V(households_old_houses_heating_savings_from_insulation), initial_investment, total_cost),
    UPDATE(AREA(), number_of_residences, USER_INPUT() * 1_000_000 + INPUT_VALUE(households_number_of_new_houses) * 1_000_000 + 1),
    UPDATE(AREA(), residences_roof_surface_available_for_pv, QUERY_PRESENT(-> { AREA(residences_roof_surface_available_for_pv) }) * (USER_INPUT() + INPUT_VALUE(households_number_of_new_houses)) /
    (QUERY_PRESENT(-> { AREA(number_of_residences) }) / 1_000_000)),
    UPDATE(
    V(OUTPUT_SLOTS(LOOKUP(households_solar_pv_solar_radiation),electricity), "links.detect{|l| !l.flexible? }"),
      share,
      (
        (INPUT_VALUE(households_solar_pv_solar_radiation_market_penetration) / 100.0) *
        (QUERY_FUTURE(-> { AREA(residences_roof_surface_available_for_pv) }) / V(households_solar_pv_solar_radiation, land_use_per_unit)) *
        V(households_solar_pv_solar_radiation, typical_electricity_production_per_unit)
      )
    ),
    UPDATE(V(households_flexibility_p2p_electricity), number_of_units, (USER_INPUT() * 1_000_000 + INPUT_VALUE(households_number_of_new_houses) * 1_000_000) * INPUT_VALUE(households_flexibility_p2p_electricity_market_penetration) / 100.0),
    UPDATE(V(households_flexibility_p2h_electricity), number_of_units, (USER_INPUT() * 1_000_000 + INPUT_VALUE(households_number_of_new_houses) * 1_000_000) * INPUT_VALUE(households_flexibility_p2h_electricity_market_penetration) / 100.0) 
  )

- priority = 0
- max_value_gql = present:Q(number_of_old_residences) * 0.000001
- min_value = 0.0
- start_value_gql = present:Q(number_of_old_residences) * 0.000001
- step_value = 0.1
- unit = #
- update_period = future

