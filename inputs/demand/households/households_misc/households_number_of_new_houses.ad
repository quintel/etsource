# Update statement for number of new households
# DEBT: remove the ugly + 1 to prevent division by zero in other queries- factor = 0.000001

- id = 640
- query =
  cost_per_new_house = AREA(new_houses_insulation_cost_constant) * (INPUT_VALUE(households_insulation_level_new_houses) - AREA(insulation_level_new_houses_min));
  total_cost = cost_per_new_house * USER_INPUT() * 1_000_000;

  EACH(
    UPDATE_WITH_FACTOR(L(households_new_houses_useful_demand_for_heating), preset_demand, USER_INPUT() * 1_000_000 / QUERY_PRESENT(-> { AREA(number_of_new_residences) })),
    UPDATE_WITH_FACTOR(L(households_new_houses_useful_demand_for_cooling), preset_demand, USER_INPUT() * 1_000_000 / QUERY_PRESENT(-> { AREA(number_of_new_residences) })),
    UPDATE(AREA(), number_of_new_residences, USER_INPUT() * 1_000_000),
    UPDATE(V(households_new_houses_heating_savings_from_insulation), initial_investment, total_cost),
    UPDATE(AREA(), number_of_residences, USER_INPUT() * 1_000_000 + INPUT_VALUE(households_number_of_old_houses) * 1_000_000 + 1),
    UPDATE(AREA(), residences_roof_surface_available_for_pv, QUERY_PRESENT(-> { AREA(residences_roof_surface_available_for_pv) }) * (USER_INPUT() + INPUT_VALUE(households_number_of_old_houses)) /
    (QUERY_PRESENT(-> { AREA(number_of_residences) }) / 1_000_000)),
    UPDATE(
    V(OUTPUT_SLOTS(LOOKUP(households_solar_pv_solar_radiation),electricity), "links.detect{|l| !l.flexible? }"),
      share,
      (
        (INPUT_VALUE(households_solar_pv_solar_radiation_market_penetration) / 100.0) *
        (QUERY_FUTURE(-> { AREA(residences_roof_surface_available_for_pv) }) / V(households_solar_pv_solar_radiation, land_use_per_unit)) *
        V(households_solar_pv_solar_radiation, typical_electricity_production_per_unit)
      )
    )
  )

- priority = 0
- max_value_gql = present:Q(number_of_new_residences) * 0.000001 * 10
- min_value = 0.0
- start_value_gql = present:Q(number_of_new_residences) * 0.000001
- step_value = 0.1
- unit = #
- update_period = future
