- query =
  more_less_corner_houses = DIVIDE(USER_INPUT(),QUERY_FUTURE(-> { AREA(number_of_corner_houses) }));
  future_number_of_residences = QUERY_FUTURE(-> { AREA(number_of_residences) }) + (USER_INPUT() - QUERY_FUTURE(-> { AREA(number_of_corner_houses) }));
  more_less_residences = DIVIDE(future_number_of_residences, QUERY_FUTURE(-> { AREA(number_of_residences) }));

  future_useful_demand =
    IF(QUERY_PRESENT(-> { AREA(number_of_corner_houses) }) > 0.0,
    more_less_corner_houses * QUERY_FUTURE(-> { V(households_corner_houses_useful_demand_for_space_heating, preset_demand) }),
    PRODUCT(USER_INPUT(), QUERY_PRESENT(-> { AREA(typical_useful_demand_space_heating_corner_house) }) * (1.0 - (INPUT_VALUE(households_insulation_level_corner_houses)/100.0)))
    );

  EACH(
    UPDATE(AREA(), number_of_residences, future_number_of_residences),
    UPDATE(AREA(), number_of_corner_houses, USER_INPUT()),
    UPDATE(V(households_space_heating_savings_from_insulation), initial_investment, QUERY_FUTURE(-> { Q(total_costs_of_insulation_households)})),
    UPDATE_WITH_FACTOR(AREA(), residences_roof_surface_available_for_pv, more_less_residences),
    UPDATE_WITH_FACTOR(L(households_useful_demand_for_cooling), preset_demand, more_less_residences),
    UPDATE(V(households_corner_houses_useful_demand_for_space_heating), preset_demand, future_useful_demand),
    UPDATE(V(households_flexibility_p2p_electricity), number_of_units, future_number_of_residences * INPUT_VALUE(households_flexibility_p2p_electricity_market_penetration) / 100.0),
    UPDATE(V(households_flexibility_p2h_electricity), number_of_units, future_number_of_residences * INPUT_VALUE(households_flexibility_p2h_electricity_market_penetration) / 100.0),
    UPDATE(
      V(OUTPUT_SLOTS(LOOKUP(households_solar_pv_solar_radiation),electricity), "links.detect{|l| !l.flexible? }"),
      share,
      (
        (INPUT_VALUE(households_solar_pv_solar_radiation_market_penetration) / 100.0) *
        (QUERY_FUTURE(-> { AREA(residences_roof_surface_available_for_pv) }) / V(households_solar_pv_solar_radiation, land_use_per_unit)) *
        V(households_solar_pv_solar_radiation, typical_electricity_production_per_unit)
      )
    )
  )
- priority = 0
- max_value_gql = present:AREA(number_of_residences)
- min_value = 0.0
- start_value_gql = present:AREA(number_of_corner_houses)
- step_value = 0.1
- unit = #
- update_period = future
- update_type = mixed
