# CO2 of carrier group 'biomass_products' for the export converter group

- unit = tonne
- query =
        greengas = G(energy_export).select { |node| node.query.input_of_greengas > 0 };
        biodiesel = G(energy_export).select { |node| node.query.input_of_biodiesel > 0 };
        bio_ethanol = G(energy_export).select { |node| node.query.input_of_bio_ethanol > 0 };
        bio_lng = G(energy_export).select { |node| node.query.input_of_bio_lng > 0 };
        bio_oil = G(energy_export).select { |node| node.query.input_of_bio_oil > 0 };
        biogas = G(energy_export).select { |node| node.query.input_of_biogas > 0 };
        torrefied_biomass_pellets = G(energy_export).select { |node| node.query.input_of_torrefied_biomass_pellets > 0 };
        wood_pellets = G(energy_export).select { |node| node.query.input_of_wood_pellets > 0 };
        bio_kerosene = G(energy_export).select { |node| node.query.input_of_bio_kerosene > 0 };
        biogenic_waste = G(energy_export).select { |node| node.query.input_of_biogenic_waste > 0 };

        SUM(
            V(greengas, "greengas_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(biodiesel, "biodiesel_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(bio_ethanol, "bio_ethanol_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(bio_lng, "bio_lng_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(bio_oil, "bio_oil_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(biogas, "biogas_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(torrefied_biomass_pellets, "torrefied_biomass_pellets_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(wood_pellets, "wood_pellets_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(bio_kerosene, "bio_kerosene_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)"),
            V(biogenic_waste, "biogenic_waste_input_conversion * primary_co2_emission * (1.0 - demand / primary_demand)")
        ) / THOUSANDS
